@page "/studenti/create"
@page "/studenti/view/{Id:int}"

@inject IServizioCitta ServizioCitta
@inject IServizioStudenti ServizioStudenti


@if (Id == null)
{
    <h1 class="mb-4">Aggiungi uno Studente</h1>
}
else
{
    <h1 class="mb-4">Dettaglio Studente</h1>
}
<div class="container mb-4">
    <Alert Model="@AlertStudenti"></Alert>
    <EditForm Model="@Studente" OnValidSubmit="() => Form_OnSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputGroup Text="Nome">
            <InputText class="form-control" @bind-Value="Studente.Nome"></InputText>
        </InputGroup>
        <InputGroup Text="Cognome">
            <InputText class="form-control" @bind-Value="Studente.Cognome"></InputText>
        </InputGroup>
        <InputGroup Text="Data Nascita">
            <InputDate class="form-control" @bind-Value="Studente.DataNascita"></InputDate>
        </InputGroup>
        <InputGroup Text="Anno Diploma">
            <InputNumber class="form-control" @bind-Value="Studente.AnnoDiploma"></InputNumber>
        </InputGroup>
        <InputGroup Text="Tipo Diploma">
            <InputSelect class="custom-select" @bind-Value="Studente.TipoDiploma">
                <option value="NessunDiploma">Seleziona un diploma</option>
                <option value="DiplomaMaturita">Diploma di Maturità</option>
                <option value="LaureaTriennale">Laurea Triennale</option>
                <option value="LaureaMagistrale">Laurea Magistrale</option>
                <option value="DottoratoDiRicerca">Dottorato di Ricerca</option>
            </InputSelect>
        </InputGroup>
        <InputGroup Text="Indirizzo">
            <InputText class="form-control" @bind-Value="Studente.Indirizzo"></InputText>
        </InputGroup>
        <InputGroup Text="Civico">
            <InputText class="form-control" @bind-Value="Studente.Civico"></InputText>
        </InputGroup>
        <InputGroup Text="Provincia">
            <select class="custom-select" @onchange="(e)=>Provincia_OnChange(e)">
                @if (Id == null)
                {
                    <option selected value="0">Seleziona una provincia</option>
                    @foreach (var provincia in province)
                    {
                        <option value="@provincia.Id">@provincia.Nome</option>
                    }
                }
                else
                {
                    @foreach (var provincia in province)
                    {
                        @if (provincia.Id == ServizioCitta.GetProvinciaByIdCitta((int)Studente.IdCitta).Result.Id)
                        {
                            <option selected value="@provincia.Id">@provincia.Nome</option>
                        }
                        else
                        {
                            <option value="@provincia.Id">@provincia.Nome</option>
                        }
                    }
                }
            </select>
        </InputGroup>
        <InputGroup Text="Citta">
            <InputSelectNumber class="custom-select" @bind-Value="Studente.IdCitta">
                @if (Id == null)
                {
                    <option value="">Seleziona una citta</option>
                }
                @foreach (var citta in cittas)
                {
                    <option value="@citta.Id">@citta.Nome</option>
                }
            </InputSelectNumber>
        </InputGroup>
        <InputGroup Text="Email">
            <InputText type="email" class="form-control" @bind-Value="Studente.Email"></InputText>
        </InputGroup>
        <InputGroup Text="Telefono">
            <InputText class="form-control" @bind-Value="Studente.Telefono"></InputText>
        </InputGroup>
        <div class="d-flex flex-column flex-md-row justify-content-end align-items-center">
            <a href="/studenti" class="btn btn-secondary w-100px ml-1 mt-1 mt-md-0">Indietro</a>
            @if (Id != null)
            {
                <button data-toggle="modal" data-target="#elimina-studente" type="button" class="btn btn-danger w-100px ml-1 mt-1 mt-md-0">Elimina</button>
            }
            <button type="submit" class="btn btn-success w-100px ml-1 mt-1 mt-md-0">Salva</button>
        </div>
    </EditForm>
</div>
<Modal Id="elimina-studente" BtnText="Elimina" Titolo="Elimina Studente" OnClick="async () => await EliminaStudente(Studente)">
    Sei sicuro di voler eliminare lo studente @Studente?.Nome @Studente?.Cognome?
</Modal>


@code {
    [Parameter]
    public int? Id { get; set; }

    AlertSettings AlertStudenti = new AlertSettings();

    Studente Studente { get; set; }
    List<Provincia> province;
    List<Citta> cittas;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            province = await ServizioCitta.GetProvince();
            Studente = Id == null ? new Studente { DataNascita = DateTime.Now, AnnoDiploma = DateTime.Now.Year, Password = "" } : await ServizioStudenti.GetStudenteById((int)Id);
            cittas = Id != null ? await ServizioCitta.GetCittaByIdProvicia(ServizioCitta.GetProvinciaByIdCitta((int)Studente.IdCitta).Result.Id) : new List<Citta>();
        }
        else NavigationManager.NavigateTo("/");

    }
    protected async Task Form_OnSubmit()
    {
        if (Id == null) await ServizioStudenti.SalvaStudente(Studente);
        else await ServizioStudenti.SalvaCambiamenti();
        StateHasChanged();
        NavigationManager.NavigateTo("/studenti");
    }
    protected async Task Provincia_OnChange(ChangeEventArgs e)
    {
        int idProv;
        Studente.IdCitta = null;
        if (int.TryParse(e.Value.ToString(), out idProv)) cittas = await ServizioCitta.GetCittaByIdProvicia(idProv);
    }
    protected async Task EliminaStudente(Studente s)
    {
        string nome = s.Nome;
        string cognome = s.Cognome;
        if (await ServizioStudenti.EliminaStudente(s)) NavigationManager.NavigateTo("/studenti");
        else AlertStudenti = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = $"Lo Studente {nome} {cognome} non può essere rimosso" };

    }
}
