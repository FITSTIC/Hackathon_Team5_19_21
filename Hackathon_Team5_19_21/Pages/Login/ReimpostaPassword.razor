@layout LoginLayout
@page "/reimposta-password"
@page "/reimposta-password/{Email}"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ApplicationDbContext db
<!-- Outer Row -->

<div class="col-lg-6">
    <div class="p-5">
        <div class="text-center">
            <h1 class="h4 text-gray-900 mb-4">Reimposta Password</h1>
        </div>
        <Alert Type="Alert.TypeMessage.Danger" IsVisible="IsVisible">@LoginMessage</Alert>
        <div class="user">
            <div class="form-group">
                <input type="email" class="form-control form-control-user" @bind="Email" required placeholder="Email Address...">
            </div>
            <div class="form-group">
                <input type="password" class="form-control form-control-user" @bind="VecchiaPassword" required placeholder="Vecchia Password">
            </div>
            <div class="form-group">
                <input type="password" class="form-control form-control-user" @bind="NuovaPassword" required placeholder="Nuova Password">
            </div>
            <div class="form-group">
                <input type="password" class="form-control form-control-user" @bind="RipetiPassword" required placeholder="Ripeti Password">
            </div>
            <button type="button" @onclick="()=>CambiaPassword()" class="btn btn-primary btn-user btn-block">
                Login
            </button>

        </div>
        <hr>
        <div class="text-center">
            <a class="small" href="">Indietro</a>
        </div>

    </div>
</div>


@code {
    [Parameter]
    public string Email { get; set; }
    public string VecchiaPassword { get; set; }
    public string NuovaPassword { get; set; }
    public string RipetiPassword { get; set; }
    public string LoginMessage { get; set; }
    public bool IsVisible { get; set; }

    private async Task CambiaPassword()
    {
        Amministratore admin = await db.Amministratori.FirstOrDefaultAsync(x => x.Email == Email);
        if (admin.Password == VecchiaPassword.Sha256())
        {
            if (ControllaPassword(NuovaPassword))
            {
                if (NuovaPassword == RipetiPassword)
                {
                    admin.Password = NuovaPassword.Sha256();
                    admin.PrimaPassword = false;
                    await db.SaveChangesAsync();
                    NavigationManager.NavigateTo("/index");
                }
                else
                {
                    IsVisible = true;
                    LoginMessage = "Le due password non coincidono";
                }
            }
            else
            {
                IsVisible = true;
                LoginMessage = "La password deve avere almeno 8 caratteri, di cui almeno un numero, un carattere speciale e una lettara maiuscola";
            }

        }
        else
        {
            IsVisible = true;
            LoginMessage = "La password attuale del tuo account non è corretta";
        }
    }
    private bool ControllaPassword(string pwd)
    {
        int maiuscole=0;
        int minuscole = 0;
        int numeri=0;
        int carSpeciali = 0;
        foreach(char c in pwd)
        {
            if (char.IsLetter(c) && char.IsUpper(c)) maiuscole++;
            if (char.IsLetter(c) && char.IsLower(c)) minuscole++;
            if (char.IsNumber(c)) numeri++;
            if (char.IsPunctuation(c)) carSpeciali++;
        }
        return pwd.Length >= 8 && maiuscole >= 1 && minuscole >= 1 && numeri >= 1 && carSpeciali >= 1;
    }
}
