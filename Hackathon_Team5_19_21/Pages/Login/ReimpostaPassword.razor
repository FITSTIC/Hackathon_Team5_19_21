@layout LoginLayout
@page "/reimposta-password"
@page "/reimposta-password/{Email}"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ApplicationDbContext db
<!-- Outer Row -->

<div class="col-lg-6">
    <div class="p-5">
        <div class="text-center">
            <h1 class="h4 text-gray-900 mb-4">Reimposta Password</h1>
        </div>
        <Alert Model="@AlertReimpostaPassword"></Alert>
        <EditForm Model="@Utente" class="user" OnSubmit="()=>CambiaPassword()">
            <div class="form-group">
                <input type="email" class="form-control form-control-user" @bind="Utente.Email" required placeholder="Email Address...">
            </div>
            <div class="form-group d-flex flex-row align-items-center">
                <input type="@( VisualizzaPassword ? "text" : "password" )" class="form-control form-control-user pr-40px" @bind="Utente.Password" required placeholder="Password">
                <i class="fa fa-fw @( VisualizzaPassword ? "fa-eye-slash":"fa-eye" ) field-icon ml--2" @onmouseup="()=> { VisualizzaPassword = !VisualizzaPassword; }"></i>
            </div>
            <div class="form-group d-flex flex-row align-items-center">
                <input type="@( VisualizzaNuovaPassword ? "text" : "password" )" class="form-control form-control-user pr-40px" @bind="Utente.NuovaPassword" required placeholder="Password">
                <i class="fa fa-fw @( VisualizzaNuovaPassword ? "fa-eye-slash":"fa-eye" ) field-icon ml--2" @onmouseup="()=> { VisualizzaNuovaPassword = !VisualizzaNuovaPassword; }"></i>
            </div>
            <div class="form-group d-flex flex-row align-items-center">
                <input type="@( VisualizzaRipetiPassword ? "text" : "password" )" class="form-control form-control-user pr-40px" @bind="Utente.RipetiPassword" required placeholder="Password">
                <i class="fa fa-fw @( VisualizzaRipetiPassword ? "fa-eye-slash":"fa-eye" ) field-icon ml--2" @onmouseup="()=> { VisualizzaRipetiPassword = !VisualizzaRipetiPassword; }"></i>
            </div>
            <button type="submit" class="btn btn-primary btn-user btn-block">
                Login
            </button>

        </EditForm>
        <hr>
        <div class="text-center">
            <a class="small" href="">Indietro</a>
        </div>

    </div>
</div>


@code {
    [Parameter]
    public string Email { get; set; }

    User Utente { get; set; }
    AlertSettings AlertReimpostaPassword = new AlertSettings();

    bool VisualizzaPassword { get; set; }
    bool VisualizzaNuovaPassword { get; set; }
    bool VisualizzaRipetiPassword { get; set; }

    protected override void OnInitialized()
    {
        Utente = new User { Email = Email };
    }

    private async Task<bool> CambiaPassword()
    {
        Amministratore admin = await db.Amministratori.FirstOrDefaultAsync(x => x.Email == Utente.Email);
        if (admin != null)
        {
            if (admin.Password == Utente.Password.Sha256())
            {
                if (Utente.ControllaNuovaPassword())
                {
                    if (Utente.NuovaPassword == Utente.RipetiPassword)
                    {
                        admin.Password = Utente.NuovaPassword.Sha256();
                        admin.PrimaPassword = false;
                        await db.SaveChangesAsync();
                        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(Utente.Email);
                        await sessionStorage.SetItemAsync("email", Utente.Email);
                        NavigationManager.NavigateTo("/index");
                    }
                    else AlertReimpostaPassword = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = "Le due password non coincidono" };
                }
                else AlertReimpostaPassword = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = "La password deve avere almeno 8 caratteri, di cui almeno un numero, un carattere speciale e una lettera maiuscola" };
            }
            else AlertReimpostaPassword = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = "La password attuale del tuo account non è corretta" };
        }
        else AlertReimpostaPassword = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = "L\'indirizzo email non è stato trovato" };
        return await Task.FromResult(true);
    }

}
