@page "/moduli/create/{IdCorso:int}"
@page "/moduli/view/{Id:int}"
@page "/corsi/{IdCorso:int}/moduli/create"
@page "/corsi/{IdCorso:int}/moduli/view/{Id:int}"

@inject IServizioModuli ServizioModuli
@inject IServizioCorsi ServizioCorsi
@inject IServizioPersonaleFitstic ServizioPersonaleFitstic
@inject IServizioEsami ServizioEsami


@if (Id == null)
{
    <h1 class="mb-4">Aggiungi un Modulo</h1>
}
else
{
    <h1 class="mb-4">Dettaglio Modulo</h1>
}
<div class="container mb-4">
    <Alert Model="AlertModuli"></Alert>
    <EditForm Model="@Modulo" OnValidSubmit="() => Form_OnSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputGroup Text="Nome">
            <InputText class="form-control" @bind-Value="Modulo.Nome"></InputText>
        </InputGroup>
        <InputGroup Text="Data Inizio">
            <InputDate class="form-control" @bind-Value="Modulo.DataInizio"></InputDate>
        </InputGroup>
        <InputGroup Text="Data Fine">
            <InputDate class="form-control" @bind-Value="Modulo.DataFine"></InputDate>
        </InputGroup>
        <InputGroup Text="Materia">
            <InputText class="form-control" @bind-Value="Modulo.Materia"></InputText>
        </InputGroup>
        @if (Id != null)
        {
            <InputGroup Text="Corso">
                <InputSelectNumber class="custom-select" @bind-Value="Modulo.IdCorso">
                    @if (Id == null)
                        {
                        <option value="">Seleziona un corso</option>
                        }
                    @foreach (var corso in corsi)
                        {
                        <option value="@corso.Id">@corso.Nome @corso.AnnoInizio - @corso.AnnoFine</option>

                        }
                </InputSelectNumber>
            </InputGroup>
        }
        <InputGroup Text="Docente">
            <InputSelectNumber class="custom-select" @bind-Value="Modulo.IdDocente">
                @if (Id == null)
                {
                    <option value="">Seleziona un docente</option>
                }
                @foreach (var docente in docenti)
                {
                    <option value="@docente.Id">@docente.Nome @docente.Cognome Nato il @docente.DataNascita.ToShortDateString() e Assunto il @docente.DataAssunzione.ToShortDateString()</option>
                }
            </InputSelectNumber>
        </InputGroup>
        <InputGroup Text="Tutor">
            <InputSelectNumber class="custom-select" @bind-Value="Modulo.IdTutor">
                @if (Id == null)
                {
                    <option value="">Seleziona un tutor</option>
                }
                @foreach (var tutor in tutors)
                {
                    <option value="@tutor.Id">@tutor.Nome @tutor.Cognome Nato il @tutor.DataNascita.ToShortDateString() e Assunto il  @tutor.DataAssunzione.ToShortDateString()</option>
                }
            </InputSelectNumber>
        </InputGroup>
        <div class="d-flex flex-column flex-md-row justify-content-end align-items-center">
            <button type="button" class="btn btn-secondary w-100px ml-1 mt-1 mt-md-0" @onclick='()=> Indietro()'>Indietro</button>
            @if (Id != null)
            {
                <button type="button" class="btn btn-danger w-100px ml-1 mt-1 mt-md-0" data-toggle="modal" data-target="#elimina-modulo">Elimina</button>
            }
            <button type="submit" class="btn btn-success w-100px ml-1 mt-1 mt-md-0">Salva</button>
        </div>
    </EditForm>
</div>
<Modal Id="elimina-modulo" BtnText="Elimina" Titolo="Elimina Modulo" OnClick="async () => await EliminaModulo(Modulo)">
    Sei sicuro di voler eliminare il modulo @Modulo?.Nome?
</Modal>
@if (Id != null)
{
    <hr />
    <h1 class="mb-4">Voti</h1>
    <Alert Model="@AlertEsami"></Alert>
    <Card>
        <CardHeader>
            <h6 class="m-0 font-weight-bold text-primary">Voti</h6>
        </CardHeader>
        <CardBody>
            <Table Items="voti">
                <TableHeader>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Cognome</th>
                    <th>Data Nascita</th>
                    <th>Data Esame</th>
                    <th>Voto</th>
                    <th></th>
                </TableHeader>
                <RowTemplate>
                    <td class="align-middle">@context.Id</td>
                    <td class="align-middle">@context.Nome</td>
                    <td class="align-middle">@context.Cognome</td>
                    <td class="align-middle">@context.DataNascita.ToShortDateString()</td>
                    <td class="align-middle">
                        @if (context.IsEditing)
                            {
                            <input type="date" @bind="@context.DataEsame" class="form-control">
                            }
                            else
                            {
                            @context.DataEsame?.ToShortDateString()
                            }
                    </td>
                    <td class="align-middle">
                        @if (context.IsEditing)
                            {
                            <input type="number" @bind="@context.Voto" class="form-control">
                            }
                            else
                            {
                            @context.Voto
                            }
                    </td>
                    <td class="align-middle">
                        @if (context.IsEditing)
                            {
                            <button type="button" class="btn btn-primary" @onclick="()=>Voto_Submit(context)">Salva</button>
                            }
                            else
                            {
                            <button type="button" class="btn btn-primary" @onclick="() => { if (!IsEditing) { context.IsEditing = true; IsEditing = true; } }">Modifica</button>
                            }
                    </td>
                </RowTemplate>
            </Table>
        </CardBody>
    </Card>
}


@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public int? IdCorso { get; set; }

    public Modulo Modulo { get; set; }
    List<Modulo> moduli;
    List<Corso> corsi;
    List<PersonaFitstic> docenti;
    List<PersonaFitstic> tutors;
    List<IServizioEsami.RisultatoQuery> voti;

    bool IsEditing { get; set; }

    AlertSettings AlertEsami = new AlertSettings();
    AlertSettings AlertModuli = new AlertSettings();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            moduli = await ServizioModuli.GetModuli();
            corsi = await ServizioCorsi.GetCorsi();
            docenti = await ServizioPersonaleFitstic.GetDocenti();
            tutors = await ServizioPersonaleFitstic.GetTutor();
            if (Id != null) voti = await ServizioEsami.GetEsamiByIdModulo((int)Id);
            Modulo = Id == null ? new Modulo { DataInizio = DateTime.Now, IdCorso = (int)IdCorso } : await ServizioModuli.GetModuloById((int)Id);
        }
        else NavigationManager.NavigateTo("/");

    }
    protected async Task Form_OnSubmit()
    {
        if (Id == null) await ServizioModuli.SalvaModulo(Modulo);
        else await ServizioModuli.SalvaCambiamenti();
        Indietro();
    }
    public async Task Voto_Submit(IServizioEsami.RisultatoQuery x)
    {
        if (await ServizioEsami.SalvaEsame(x.Id, (int)Id, x.Voto, x.DataEsame))
        {
            IsEditing = false;
            voti = await ServizioEsami.GetEsamiByIdModulo((int)Id);
            StateHasChanged();
        }
        else AlertEsami = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = "Si è verificato durante la modifica dei dati dell\'esame. Probabilmente è stato inserito un valore non corretto." };
    }
    protected async Task EliminaModulo(Modulo modulo)
    {
        string nome = modulo.Nome;
        if (await ServizioModuli.EliminaModulo(modulo)) Indietro();
        else AlertModuli = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = $"Il Modulo \"{nome}\" non può essere rimosso" };


    }
    protected void Indietro()
    {
        if (System.Text.RegularExpressions.Regex.IsMatch(NavigationManager.Uri, @"/corsi/\d+/moduli/view/\d+") || System.Text.RegularExpressions.Regex.IsMatch(NavigationManager.Uri, @"/corsi/\d+/moduli/create")) NavigationManager.NavigateTo($"/corsi/view/{IdCorso}");
        else NavigationManager.NavigateTo($"/moduli");
    }
}
