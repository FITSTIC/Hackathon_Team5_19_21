@page "/iscrizioni/create/{IdCorso:int}"
@page "/iscrizioni/view/{Id:int}"
@page "/corsi/{IdCorso:int}/iscrizioni/create"
@page "/corsi/{IdCorso:int}/iscrizioni/view/{Id:int}"

@inject IServizioCorsi ServizioCorsi
@inject IServizioStudenti ServizioStudenti

<h1>Iscrizioni</h1>
@if (Id == null)
{
    <p>Aggiungi un'iscrizione</p>
}
else
{
    <p>Modifica un'inscrizione</p>
}
<div class="container mb-4">
    <EditForm Model="@Iscrizione" OnValidSubmit="() => Form_OnSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <label class="input-group-text">Studente</label>
            </div>
            @if (Id == null)
            {
                <select class="custom-select" @bind="Iscrizione.IdStudente">
                    <option value="0">Seleziona uno studente</option>
                    @foreach (var studente in studenti)
                    {
                        <option value="@studente.Id">@studente.Nome @studente.Cognome Nato il @studente.DataNascita.ToShortDateString()</option>

                    }
                </select>
            }
            else
            {
                <select disabled class="custom-select" @bind="Iscrizione.IdStudente">
                    @foreach (var studente in studenti)
                    {
                        <option value="@studente.Id">@studente.Nome @studente.Cognome Nato il @studente.DataNascita.ToShortDateString()</option>

                    }
                </select>
            }


        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Data Iscrizione</span>
            </div>
            <InputDate class="form-control" @bind-Value="Iscrizione.DataIscrizione"></InputDate>
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Voto Finale</span>
            </div>
            <InputNumber class="form-control" @bind-Value="Iscrizione.VotoFinale"></InputNumber>
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Stato</span>
            </div>
            <div class="form-control h-auto d-flex flex-column flex-sm-row justify-content-around">
                <div class="custom-control custom-radio">
                    @if (Iscrizione.NonAmmesso)
                    {
                        <input type="radio" name="radioNonAmmesso" checked class="custom-control-input" id="r1" @onchange="(e)=>NonAmmesso_OnChange(true)" />
                    }
                    else
                    {
                        <input type="radio" name="radioNonAmmesso" class="custom-control-input" id="r1" @onchange="(e)=>NonAmmesso_OnChange(true)" />
                    }
                    <label class="custom-control-label" for="r1">Non Ammesso</label>
                </div>
                <div class="custom-control custom-radio">
                    @if (Iscrizione.NonAmmesso)
                    {
                        <input type="radio" name="radioNonAmmesso" class="custom-control-input" id="r2" @onchange="(e)=>NonAmmesso_OnChange(false)" />
                    }
                    else
                    {
                        <input type="radio" name="radioNonAmmesso" class="custom-control-input" id="r2" checked @onchange="(e)=>NonAmmesso_OnChange(false)" />
                    }
                    <label class="custom-control-label" for="r2">Ammesso</label>
                </div>
            </div>
        </div>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Ritirato</span>
            </div>
            <div class="form-control h-auto d-flex flex-column flex-sm-row justify-content-around">
                <div class="custom-control custom-radio">
                    @if (Iscrizione.Ritirato)
                    {
                        <input type="radio" name="radioRitirato" checked class="custom-control-input" id="r3" @onchange="(e)=>Ritirato_OnChange(true)" />
                    }
                    else
                    {
                        <input type="radio" name="radioRitirato" class="custom-control-input" id="r3" @onchange="(e)=>Ritirato_OnChange(true)" />
                    }
                    <label class="custom-control-label" for="r3">Sì</label>
                </div>
                <div class="custom-control custom-radio">
                    @if (Iscrizione.Ritirato)
                    {
                        <input type="radio" name="radioRitirato" class="custom-control-input" id="r4" @onchange="(e)=>Ritirato_OnChange(false)" />
                    }
                    else
                    {
                        <input type="radio" name="radioRitirato" class="custom-control-input" id="r4" checked @onchange="(e)=>Ritirato_OnChange(false)" />
                    }
                    <label class="custom-control-label" for="r4">No</label>
                </div>
            </div>
        </div>
        <div class="text-right">
            <button type="submit" class="btn btn-success">Salva</button>
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public int? IdCorso { get; set; }

    public StudenteIscritto Iscrizione { get; set; }
    List<Corso> corsi;
    List<Studente> studenti;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            corsi = await ServizioCorsi.GetCorsi();
            studenti = IdCorso!=null && Id==null ? await ServizioStudenti.GetStudentiNonIscrittiAlCorso((int)IdCorso) : await ServizioStudenti.GetStudenti();
            Iscrizione = Id == null ? new StudenteIscritto { DataIscrizione = DateTime.Now, NonAmmesso = true, VotoFinale = 0, IdCorso = (int)IdCorso } : await ServizioStudenti.GetIscrizioneById((int)Id);
        }
        else NavigationManager.NavigateTo("/");

    }
    protected async Task Form_OnSubmit()
    {
        if (Id == null) await ServizioStudenti.SalvaIscrizione(Iscrizione);
        await ServizioStudenti.SalvaCambiamenti();
        StateHasChanged();
        if (NavigationManager.Uri.Contains("/corsi/" + IdCorso + "/iscrizioni/view/" + Id)|| NavigationManager.Uri.Contains("/corsi/" + IdCorso + "/iscrizioni/create")) NavigationManager.NavigateTo("/corsi/view/" + IdCorso);
        else NavigationManager.NavigateTo("/iscrizioni");
    }
    protected void NonAmmesso_OnChange(bool ris)
    {
        Iscrizione.NonAmmesso = ris;
    }
    protected void Ritirato_OnChange(bool ris)
    {
        Iscrizione.Ritirato = ris;
    }
}
