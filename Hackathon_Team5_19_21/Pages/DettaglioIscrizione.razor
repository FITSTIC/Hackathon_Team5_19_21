@page "/iscrizioni/create/{IdCorso:int}"
@page "/iscrizioni/view/{Id:int}"
@page "/corsi/{IdCorso:int}/iscrizioni/create"
@page "/corsi/{IdCorso:int}/iscrizioni/view/{Id:int}"

@inject IServizioCorsi ServizioCorsi
@inject IServizioStudenti ServizioStudenti


@if (Id == null)
{
    <h1 class="mb-4">Aggiungi un'iscrizione</h1>
}
else
{
    <h1 class="mb-4">Dettaglio Iscrizione</h1>
}
<div class="container mb-4">
    <Alert Model="@AlertIscrizioni"></Alert>
    <EditForm Model="@Iscrizione" OnValidSubmit="() => Form_OnSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputGroup Text="Studente">
            @if (Id == null)
            {
                <InputSelectNumber class="custom-select" @bind-Value="Iscrizione.IdStudente">
                    <option value="">Seleziona uno studente</option>
                    @foreach (var studente in studenti)
                        {
                        <option value="@studente.Id">@studente.Nome @studente.Cognome Nato il @studente.DataNascita.ToShortDateString()</option>

                        }
                </InputSelectNumber>
            }
            else
            {
                <InputSelectNumber disabled class="custom-select" @bind-Value="Iscrizione.IdStudente">
                    @foreach (var studente in studenti)
                        {
                        <option value="@studente.Id">@studente.Nome @studente.Cognome Nato il @studente.DataNascita.ToShortDateString()</option>

                        }
                </InputSelectNumber>
            }
        </InputGroup>
        <InputGroup Text="Data Iscrizione">
            <InputDate class="form-control" @bind-Value="Iscrizione.DataIscrizione"></InputDate>
        </InputGroup>
        <InputGroup Text="Voto Finale">
            <InputNumber class="form-control" @bind-Value="Iscrizione.VotoFinale"></InputNumber>
        </InputGroup>
        <InputGroup Text="Stato">
            <div class="form-control h-auto d-flex flex-column flex-sm-row justify-content-around">
                <div class="custom-control custom-radio">
                    @if (Iscrizione.NonAmmesso)
                    {
                        <input type="radio" name="radioNonAmmesso" checked class="custom-control-input" id="r1" @onchange="(e)=>NonAmmesso_OnChange(true)" />
                    }
                    else
                    {
                        <input type="radio" name="radioNonAmmesso" class="custom-control-input" id="r1" @onchange="(e)=>NonAmmesso_OnChange(true)" />
                    }
                    <label class="custom-control-label" for="r1">Non Ammesso</label>
                </div>
                <div class="custom-control custom-radio">
                    @if (Iscrizione.NonAmmesso)
                    {
                        <input type="radio" name="radioNonAmmesso" class="custom-control-input" id="r2" @onchange="(e)=>NonAmmesso_OnChange(false)" />
                    }
                    else
                    {
                        <input type="radio" name="radioNonAmmesso" class="custom-control-input" id="r2" checked @onchange="(e)=>NonAmmesso_OnChange(false)" />
                    }
                    <label class="custom-control-label" for="r2">Ammesso</label>
                </div>
            </div>
        </InputGroup>
        <InputGroup Text="Ritirato">
            <div class="form-control h-auto d-flex flex-column flex-sm-row justify-content-around">
                <div class="custom-control custom-radio">
                    @if (Iscrizione.Ritirato)
                    {
                        <input type="radio" name="radioRitirato" checked class="custom-control-input" id="r3" @onchange="(e)=>Ritirato_OnChange(true)" />
                    }
                    else
                    {
                        <input type="radio" name="radioRitirato" class="custom-control-input" id="r3" @onchange="(e)=>Ritirato_OnChange(true)" />
                    }
                    <label class="custom-control-label" for="r3">Sì</label>
                </div>
                <div class="custom-control custom-radio">
                    @if (Iscrizione.Ritirato)
                    {
                        <input type="radio" name="radioRitirato" class="custom-control-input" id="r4" @onchange="(e)=>Ritirato_OnChange(false)" />
                    }
                    else
                    {
                        <input type="radio" name="radioRitirato" class="custom-control-input" id="r4" checked @onchange="(e)=>Ritirato_OnChange(false)" />
                    }
                    <label class="custom-control-label" for="r4">No</label>
                </div>
            </div>
        </InputGroup>
        <div class="d-flex flex-column flex-md-row justify-content-end align-items-center">
            <button type="button" class="btn btn-secondary w-100px ml-1 mt-1 mt-md-0" @onclick="()=>Indietro()">Indietro</button>
            @if (Id != null)
            {
                <button type="button" class="btn btn-danger w-100px ml-1 mt-1 mt-md-0" data-toggle="modal" data-target="#elimina-iscrizione">Elimina</button>
            }
            <button type="submit" class="btn btn-success w-100px ml-1 mt-1 mt-md-0">Salva</button>
        </div>
    </EditForm>
</div>
<Modal Id="elimina-iscrizione" BtnText="Elimina" Titolo="Elimina Iscrizione" OnClick="async () => await EliminaIscrizione(Iscrizione)">
    Sei sicuro di voler eliminare questo studente dal corso a cui è iscritto?
</Modal>

@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public int? IdCorso { get; set; }

    StudenteIscritto Iscrizione { get; set; }

    List<Corso> corsi;
    List<Studente> studenti;

    AlertSettings AlertIscrizioni = new AlertSettings();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            corsi = await ServizioCorsi.GetCorsi();
            studenti = IdCorso != null && Id == null ? await ServizioStudenti.GetStudentiNonIscrittiAlCorso((int)IdCorso) : await ServizioStudenti.GetStudenti();
            Iscrizione = Id == null ? new StudenteIscritto { DataIscrizione = DateTime.Now, NonAmmesso = true, VotoFinale = 0, IdCorso = (int)IdCorso } : await ServizioStudenti.GetIscrizioneById((int)Id);
        }
        else NavigationManager.NavigateTo("/");

    }
    protected async Task Form_OnSubmit()
    {
        if (Id == null) await ServizioStudenti.SalvaIscrizione(Iscrizione);
        await ServizioStudenti.SalvaCambiamenti();
        Indietro();
    }
    protected void NonAmmesso_OnChange(bool ris)
    {
        Iscrizione.NonAmmesso = ris;
    }
    protected void Ritirato_OnChange(bool ris)
    {
        Iscrizione.Ritirato = ris;
    }
    protected async Task EliminaIscrizione(StudenteIscritto studente)
    {
        if (await ServizioStudenti.EliminaIscrizione(studente.Id))Indietro();
        else AlertIscrizioni = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = $"L\'iscrizione non può essere rimossa" };
    }
    protected void Indietro()
    {
        if (System.Text.RegularExpressions.Regex.IsMatch(NavigationManager.Uri, @"/corsi/\d+/iscrizioni/view/\d+") || System.Text.RegularExpressions.Regex.IsMatch(NavigationManager.Uri, @"/corsi/\d+/iscrizioni/create")) NavigationManager.NavigateTo($"/corsi/view/{IdCorso}");
        else NavigationManager.NavigateTo($"/iscrizioni");
    }
}
