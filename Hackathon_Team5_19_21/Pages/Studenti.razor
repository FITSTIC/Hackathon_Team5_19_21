@page "/studenti"

@inject IServizioStudenti ServizioStudenti
@inject IServizioCitta ServizioCitta

<h1>Studenti</h1>

<p>Visualizza gli studenti</p>

<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex flex-row justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">Studenti</h6>
        <a href="/studenti/create" class="btn btn-success">Aggiungi</a>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered text-center">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nome</th>
                        <th>Cognome</th>
                        <th>Data Nascita</th>
                        <th>Indirizzo</th>
                        <th>Tipo Diploma</th>
                        <th>Anno Diploma</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (studenti != null)
                    {
                        @foreach (var studente in studenti)
                        {
                    <tr>
                        <td class="align-middle">@studente.Id</td>
                        <td class="align-middle">@studente.Nome</td>
                        <td class="align-middle">@studente.Cognome</td>
                        <td class="align-middle">@studente.DataNascita.ToShortDateString()</td>
                        <td class="align-middle">@studente.Indirizzo, @studente.Civico, @ServizioCitta.GetCittaById(studente.IdCitta).Result.Nome (@ServizioCitta.GetProvinciaByIdCitta(studente.IdCitta).Result.Sigla)</td>
                        @switch (studente.TipoDiploma)
                        {
                            case TipoDiploma.DiplomaMaturita:
                                <td class="align-middle">Diploma di Maturità</td>
                                break;
                            case TipoDiploma.DottoratoDiRicerca:
                                <td class="align-middle">Dottorato di Ricerca</td>
                                break;
                            case TipoDiploma.LaureaMagistrale:
                                <td class="align-middle">Laurea Magistrale</td>
                                break;
                            case TipoDiploma.LaureaTriennale:
                                <td class="align-middle">Laurea Triennale</td>
                                break;
                            case TipoDiploma.NessunDiploma:
                                <td class="align-middle">Nessun Diploma</td>
                                break;
                        }


                        <td class="align-middle">@studente.AnnoDiploma</td>
                        <td class="align-middle"><a href="/studenti/view/@studente.Id" class="btn btn-primary">Dettaglio</a></td>
                        <td class="align-middle"><button type="button" class="btn btn-danger" @onclick="() => BtnElimina_Click(studente)">Elimina</button></td>
                    </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {

    List<Studente> studenti;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated) studenti = await ServizioStudenti.GetStudenti();
        else NavigationManager.NavigateTo("/");
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await JSRuntime.InvokeVoidAsync("GeneraDataTable", 7, 8);
    }

    protected async Task BtnElimina_Click(Studente s)
    {
        await ServizioStudenti.EliminaStudente(s);
        studenti = await ServizioStudenti.GetStudenti();
        StateHasChanged();

    }

}
