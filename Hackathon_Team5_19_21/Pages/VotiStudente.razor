@page "/voti"

@using Hackathon_Team5_19_21.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db


<h1>Voti</h1>

<p>Visualizza i voti dei tuoi studenti</p>

@if (moduliDocente == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var moduloDocente in moduliDocente)
    {
        <table class="table table-bordered text-center">
            <thead>
                <tr>
                    <th class="text-center" colspan="6">@moduloDocente.Nome @moduloDocente.DataInizio.ToShortDateString() - @if (moduloDocente.DataFine.HasValue) { moduloDocente.DataFine.Value.ToShortDateString(); }</th>
                </tr>
                <tr>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Cognome</th>
                    <th>Data Nascita</th>
                    <th>Voto</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (votiDocente.FindAll(x => x.IdModulo == moduloDocente.Id).Count > 0)
                {
                    @foreach (var x in votiDocente.FindAll(x => x.IdModulo == moduloDocente.Id))
                    {
                        <tr>
                            <td class="align-middle">@x?.ID</td>
                            <td class="align-middle">@x?.Nome</td>
                            <td class="align-middle">@x?.Cognome</td>
                            <td class="align-middle"></td>
                            @if (x.IsEditing == false)
                            {
                                <td class="align-middle" @ondblclick="(e) => Td_DoubleClick(e, x)">@x.Voto</td>
                            }
                            else
                            {
                                <td class="align-middle">
                                    <input @bind-value="@x.Voto" @onkeyup="(e) => Input_OnKeyUp(e, x)" type="number" class="@inputClass" />
                                </td>
                            }
                            <td class="align-middle"><a href="dettaglio-studente/@x?.ID" class="btn btn-warning">Dettaglio</a></td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    }
}

@code {
    private string spanClass = "d-block";
    private string inputClass = "d-none form-control";

    private List<Modulo> moduliDocente;

    private List<VotiDocente> votiDocente;

    public class VotiDocente
    {
        public int ID { get; set; }
        public string Nome { get; set; }
        public string Cognome { get; set; }
        public int? Voto { get; set; }
        public int IdModulo { get; set; }
        public int IdStudenteIscritto { get; set; }
        public bool IsEditing { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        moduliDocente = GetModuliDocente();
        votiDocente = GetVotiDocente();

    }
    public List<Modulo> GetModuliDocente()
    {
        return (from modulo in db.Moduli
                join docente in db.PersonaleFitstic on modulo.IdDocente equals docente.Id
                where docente.Docente == true
                select modulo).AsQueryable().ToList();
    }
    public List<VotiDocente> GetVotiDocente()
    {
        List<VotiDocente> voti = new List<VotiDocente>();
        var q1 = (from studente in db.Studenti
                  join studenteIscritto in db.StudentiIscritti on studente.Id equals studenteIscritto.IdStudente
                  join esame in db.Esami on studenteIscritto.Id equals esame.IdStudenteIscritto
                  select new VotiDocente { ID = studente.Id, Nome = studente.Nome, Cognome = studente.Cognome, Voto = esame.Voto, IdModulo = esame.IdModulo, IdStudenteIscritto = studenteIscritto.Id, IsEditing = false }).ToList();

        var q2 = (from studente in db.Studenti
                  join studenteIscritto in db.StudentiIscritti on studente.Id equals studenteIscritto.IdStudente
                  join corso in db.Corsi on studenteIscritto.IdCorso equals corso.Id
                  join modulo in db.Moduli on corso.Id equals modulo.IdCorso
                  select new VotiDocente { ID = studente.Id, Nome = studente.Nome, Cognome = studente.Cognome, Voto = null, IdModulo = modulo.Id, IdStudenteIscritto = studenteIscritto.Id, IsEditing = false }).ToList();

        foreach (var studenteQ2 in q2)
        {
            if (q1.Find(x => x.ID == studenteQ2.ID && x.IdModulo == studenteQ2.IdModulo) == null) voti.Add(studenteQ2);
            else voti.Add(q1.Find(x => x.ID == studenteQ2.ID && x.IdModulo == studenteQ2.IdModulo));
        }

        return voti;
    }
    public void Td_DoubleClick(EventArgs e, VotiDocente x)
    {
        x.IsEditing = true;
        if (spanClass == "d-block")
        {
            spanClass = "d-none";
            inputClass = "d-block form-control";
        }
    }
    public void Input_OnKeyUp(KeyboardEventArgs e, VotiDocente x)
    {
        if (e.Key == "Enter" && x.Voto >= 0 && x.Voto <= 100)
        {
            var q1 = (from studente in db.Studenti
                      join studenteIscritto in db.StudentiIscritti on studente.Id equals studenteIscritto.IdStudente
                      join esame in db.Esami on studenteIscritto.Id equals esame.IdStudenteIscritto
                      where studente.Id == x.ID && esame.IdModulo == x.IdModulo
                      select esame).ToList();
            if (q1.Count == 0) db.Esami.Add(new Esame { IdModulo = x.IdModulo, Voto = x.Voto, IdStudenteIscritto = x.IdStudenteIscritto });
            else q1[0].Voto = x.Voto;

            db.SaveChanges();

            if (spanClass == "d-none")
            {
                spanClass = "d-block";
                inputClass = "d-none form-control";
            }
            x.IsEditing = false;
        }
        else if(e.Key == "Enter" && (x.Voto < 0 || x.Voto > 100))
        {
            inputClass = "d-block form-control btn-outline-danger bg-white text-dark";
        }
    }
}
