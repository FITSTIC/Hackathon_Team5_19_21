@page "/moduli"

@using Hackathon_Team5_19_21.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject IServizioModuli ServizioModuli
@inject IServizioPersonaleFitstic ServizioPersonaleFitstic
@inject IServizioCorsi ServizioCorsi
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime

<h1>Moduli</h1>

<p>Visualizza i moduli</p>

@if (moduli == null)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (var corso in corsi)
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">@corso.Nome @corso.AnnoInizio - @corso.AnnoFine</h6>
                <a href="/moduli/create" class="btn btn-success">Aggiungi</a>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table id="elencoModuli" class="table table-bordered" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nome</th>
                                <th>Data Inizio</th>
                                <th>Data Fine</th>
                                <th>Materia</th>
                                <th>Docente</th>
                                <th>Tutor</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var modulo in moduli)
                            {
                                <tr>
                                    <td>@modulo.Id</td>
                                    <td>@modulo.Nome</td>
                                    <td>@modulo.DataInizio.ToShortDateString()</td>
                                    @if (modulo.DataFine.HasValue)
                                    {
                                        <td>@modulo.DataFine.Value.ToShortDateString()</td>
                                    }
                                    else
                                    {
                                        <td>In Corso</td>
                                    }
                                    <td>@modulo.Materia</td>
                                    @using (var docente = ServizioModuli.GetDocenteDelModulo(db, modulo))
                                    {
                                        <td>
                                            @docente.Result.Nome @docente.Result.Cognome
                                        </td>
                                    }
                                    @using (var tutor = ServizioModuli.GetTutorDelModulo(db, modulo))
                                    {
                                        <td>
                                            @tutor.Result.Nome @tutor.Result.Cognome
                                        </td>
                                    }
                                    <td><a href="/moduli/view/@modulo.Id" class="btn btn-primary">Modifica</a></td>
                                    <td><button type="button" class="btn btn-danger" @onclick="() => BtnElimina_Click(modulo)">Elimina</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
}


@code {

    public Modulo NuovoModulo { get; set; } = new Modulo { DataInizio = DateTime.Now };

    List<Modulo> moduli;
    List<Corso> corsi;
    List<PersonaFitstic> docenti;
    List<PersonaFitstic> tutors;
    public Modulo ModalObject { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            moduli = await ServizioModuli.GetModuli(db);
            corsi = await ServizioCorsi.GetCorsi(db);
            docenti = await ServizioPersonaleFitstic.GetDocenti(db);
            tutors = await ServizioPersonaleFitstic.GetTutor(db);
        }
        else NavigationManager.NavigateTo("/");

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await JSRuntime.InvokeVoidAsync("GeneraDataTableModuli");
    }
    
    protected async Task BtnElimina_Click(Modulo modulo)
    {
        await ServizioModuli.EliminaModulo(db, modulo);
        moduli = await ServizioModuli.GetModuli(db);
        StateHasChanged();

    }

}
