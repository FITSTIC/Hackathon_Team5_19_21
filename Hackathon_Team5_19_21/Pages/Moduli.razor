@page "/moduli"

@inject IServizioModuli ServizioModuli
@inject IServizioPersonaleFitstic ServizioPersonaleFitstic
@inject IServizioCorsi ServizioCorsi

<h1 class="mb-4">Moduli</h1>

@foreach (var corso in corsi ?? new List<Corso>())
{
    <Card>
        <CardHeader>
            <h6 class="m-0 font-weight-bold text-primary">@corso.Nome @corso.AnnoInizio - @corso.AnnoFine</h6>
            <a href="/moduli/create/@corso.Id" class="btn btn-success">Aggiungi</a>
        </CardHeader>
        <CardBody>
            <Table Items="ServizioModuli.GetModuliDelCorso(corso).Result">
                <TableHeader>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Data Inizio</th>
                    <th>Data Fine</th>
                    <th>Materia</th>
                    <th>Docente</th>
                    <th>Tutor</th>
                    <th></th>
                </TableHeader>
                <RowTemplate>
                    <td>@context.Id</td>
                    <td>@context.Nome</td>
                    <td>@context.DataInizio.ToShortDateString()</td>
                    <td>@context.DataFine?.ToShortDateString()</td>
                    <td>@context.Materia</td>
                    @using (var docente = ServizioModuli.GetDocenteDelModulo(context))
                        {
                        <td>
                            @docente.Result.Nome @docente.Result.Cognome
                        </td>
                        }
                    @using (var tutor = ServizioModuli.GetTutorDelModulo(context))
                        {
                        <td>
                            @tutor.Result.Nome @tutor.Result.Cognome
                        </td>
                        }
                    <td><a href="/moduli/view/@context.Id" class="btn btn-primary">Dettaglio</a></td>
                </RowTemplate>
            </Table>
        </CardBody>
    </Card>

}


@code {
    List<Corso> corsi;
    List<PersonaFitstic> docenti;
    List<PersonaFitstic> tutors;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            corsi = await ServizioCorsi.GetCorsiAttuali();
            docenti = await ServizioPersonaleFitstic.GetDocenti();
            tutors = await ServizioPersonaleFitstic.GetTutor();
        }
        else NavigationManager.NavigateTo("/");

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await JSRuntime.InvokeVoidAsync("GeneraDataTable", 7);
    }

    

}
