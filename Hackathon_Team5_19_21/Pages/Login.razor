@layout LoginLayout
@page "/"
@using Hackathon_Team5_19_21.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ApplicationDbContext db

<div class="card card-login mx-auto mt-5">
    <div class="card-header">Login</div>
    <div class="card-body">
        <Alert Type="Alert.TypeMessage.Danger" IsVisible="IsVisible">
            @LoginMessage
        </Alert>
        <form @onkeyup='async (e)=> { if (e.Key == "Enter") await ValidateUser(); }'>
            <div class="form-group">
                <label for="inputEmail">Email address</label>
                <input type="email" @bind="Email" class="form-control" placeholder="Email address" required autofocus="autofocus" />
            </div>
            <div class="form-group">
                <label for="inputPassword">Password</label>
                <input type="password" @bind="Password" class="form-control" required placeholder="Password" />
            </div>
            <div class="text-right">
                <button type="button" class="btn btn-primary" @onclick="()=>ValidateUser()">Login</button>
            </div>
        </form>
    </div>
</div>

@code {
    public string Email { get; set; }
    public string Password { get; set; }
    public string LoginMessage { get; set; }
    public bool IsVisible { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated) NavigationManager.NavigateTo("/index");
    }

    private async Task<bool> ValidateUser()
    {
        if (Email != "" && Email!=null && Password != "" && Password!=null)
        {
            var result = db.Amministratori.Where(x => x.Email == Email && x.Password == Password.Sha256()).ToList();
            if (result.Count>0)
            {
                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(Email);
                NavigationManager.NavigateTo("/index");
                await sessionStorage.SetItemAsync("email", Email);
                await sessionStorage.SetItemAsync("admin", result[0]);
            }
            else
            {
                IsVisible = true;
                LoginMessage = "Credenziali Sbagliate";
            }
        }
        else
        {
            IsVisible = true;
            LoginMessage = "Inserire Email e Password";
        }

        return await Task.FromResult(true);
    }
}
