@page "/personale/create"
@page "/personale/view/{Id:int}"

@inject IServizioPersonaleFitstic ServizioPersonaleFitstic

@if (Id == null)
{
    <h1 class="mb-4">Aggiungi un Dipendente</h1>
}
else
{
    <h1 class="mb-4">Dettaglio Dipendente</h1>
}

<div class="container mb-4">
    <Alert Model="@AlertPersonale"></Alert>
    <EditForm Model="@Persona" OnValidSubmit="()=>Form_OnSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputGroup Text="Nome">
            <InputText class="form-control" @bind-Value="Persona.Nome"></InputText>
        </InputGroup>
        <InputGroup Text="Cognome">
            <InputText class="form-control" @bind-Value="Persona.Cognome"></InputText>
        </InputGroup>
        <InputGroup Text="Data Nascita">
            <InputDate class="form-control" @bind-Value="Persona.DataNascita"></InputDate>
        </InputGroup>
        <InputGroup Text="Data Assunzione">
            <InputDate class="form-control" @bind-Value="Persona.DataAssunzione"></InputDate>
        </InputGroup>
        <InputGroup Text="Ruoli">
            <div class="form-control h-auto d-flex flex-column flex-sm-row justify-content-around">
                <div class="custom-control custom-checkbox">
                    <InputCheckbox class="custom-control-input" id="ckb1" @bind-Value="Persona.Docente"></InputCheckbox>
                    <label class="custom-control-label" for="ckb1">Docente</label>
                </div>
                <div class="custom-control custom-checkbox">
                    <InputCheckbox class="custom-control-input" id="ckb2" @bind-Value="Persona.Organizzatore"></InputCheckbox>
                    <label class="custom-control-label" for="ckb2">Organizzatore</label>
                </div>
                <div class="custom-control custom-checkbox">
                    <InputCheckbox class="custom-control-input" id="ckb3" @bind-Value="Persona.Tutor"></InputCheckbox>
                    <label class="custom-control-label" for="ckb3">Tutor</label>
                </div>
            </div>
        </InputGroup>
        <InputGroup Text="Email">
            <InputText type="email" class="form-control" @bind-Value="Persona.Email" required></InputText>
        </InputGroup>
        <div class="input-group mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Password</span></div>
            <InputText type="@( VisualizzaPassword ? "text" : "password" )" class="form-control" @bind-Value="Persona.Password"></InputText>
            <div class="input-group-append">
                <span class="input-group-text">
                    <i class="fa fa-fw @( VisualizzaPassword ? "fa-eye-slash":"fa-eye" ) field-icon" @onmouseup="()=> { VisualizzaPassword = !VisualizzaPassword; }"></i>
                </span>
            </div>
        </div>
        <InputGroup Text="Prima Password">
            <div class="form-control h-auto d-flex flex-column flex-sm-row justify-content-around">
                <div class="custom-control custom-radio">
                    @if (Persona.PrimaPassword)
                    {
                        <input type="radio" name="radioPrimaPassword" checked class="custom-control-input" id="r1" @onchange="(e)=>PrimaPassword_OnChange(true)" />
                    }
                    else
                    {
                        <input type="radio" name="radioPrimaPassword" class="custom-control-input" id="r1" @onchange="(e)=>PrimaPassword_OnChange(true)" />
                    }
                    <label class="custom-control-label" for="r1">Sì</label>
                </div>
                <div class="custom-control custom-radio">
                    @if (Persona.PrimaPassword)
                    {
                        <input type="radio" name="radioPrimaPassword" class="custom-control-input" id="r2" @onchange="(e)=>PrimaPassword_OnChange(false)" />
                    }
                    else
                    {
                        <input type="radio" name="radioPrimaPassword" class="custom-control-input" id="r2" checked @onchange="(e)=>PrimaPassword_OnChange(false)" />
                    }
                    <label class="custom-control-label" for="r2">No</label>
                </div>
            </div>
        </InputGroup>
        <InputGroup Text="Telefono">
            <InputText class="form-control" @bind-Value="Persona.Telefono"></InputText>
        </InputGroup>
        <div class="d-flex flex-column flex-md-row justify-content-end align-items-center">
            <button type="button" class="btn btn-secondary w-100px ml-1 mt-1 mt-md-0" @onclick='()=> { NavigationManager.NavigateTo("/personale"); }'>Indietro</button>
            @if (Id != null)
            {
                <button type="button" class="btn btn-danger w-100px ml-1 mt-1 mt-md-0" data-toggle="modal" data-target="#elimina-persona">Elimina</button>
            }
            <button type="submit" class="btn btn-success w-100px ml-1 mt-1 mt-md-0">Salva</button>
        </div>
    </EditForm>
</div>
<Modal Id="elimina-persona" BtnText="Elimina" OnClick="()=>EliminaPersonaFitstic(Persona)" Titolo="Elimina Dipendente">
    Sei sicuro di voler rimuovere il dipendente @Persona?.Nome @Persona?.Cognome?
</Modal>
@code {
    AlertSettings AlertPersonale = new AlertSettings();
    [Parameter]
    public int? Id { get; set; }
    public PersonaFitstic Persona { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool VisualizzaPassword { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var admin = await ServizioPersonaleFitstic.GetAdminByEmail(user.Identity.Name);
            Persona = Id == null ? new PersonaFitstic { DataNascita = DateTime.Now, DataAssunzione = DateTime.Now, PrimaPassword = true, IdAmministratore = admin.Id } : await ServizioPersonaleFitstic.GetPersonaById((int)Id);
        }
        else NavigationManager.NavigateTo("/");
    }
    protected async Task Form_OnSubmit()
    {
        if (Id == null) await ServizioPersonaleFitstic.SalvaPersona(Persona);
        else
        {
            if (Persona.PrimaPassword) Persona.Password = Persona.Password.Sha256();
            if (await ServizioPersonaleFitstic.ControllaRuoli(Persona)) await ServizioPersonaleFitstic.SalvaCambiamenti();
            else await ServizioPersonaleFitstic.ReimpostaRuoli(Persona);

        }
        StateHasChanged();
        NavigationManager.NavigateTo("/personale");
    }
    protected void PrimaPassword_OnChange(bool ris)
    {
        Persona.PrimaPassword = ris;
    }
    protected async Task EliminaPersonaFitstic(PersonaFitstic p)
    {
        string nome = p.Nome;
        string cognome = p.Cognome;
        if (await ServizioPersonaleFitstic.EliminaPersona(p)) NavigationManager.NavigateTo("/personale");
        else AlertPersonale = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = $"Il Dipendente {nome} {cognome} non può essere rimosso" };


    }
}
