@page "/corsi/create"
@page "/corsi/view/{Id:int}"

@inject IServizioCitta ServizioCitta
@inject IServizioPersonaleFitstic ServizioPersonaleFitstic
@inject IServizioCorsi ServizioCorsi
@inject IServizioModuli ServizioModuli
@inject IServizioStudenti ServizioStudenti


@if (Id == null)
{
    <h1 class="mb-4">Aggiungi un Corso</h1>
}
else
{
    <h1 class="mb-4">Dettaglio Corso</h1>
}
<div class="container mb-4">
    <Alert Model="@AlertCorsi"></Alert>
    <EditForm Model="@Corso" OnValidSubmit="() => Form_OnSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputGroup Text="Nome">
            <InputText class="form-control" @bind-Value="Corso.Nome"></InputText>
        </InputGroup>
        <InputGroup Text="Anno Inizio">
            <InputNumber class="form-control" @bind-Value="Corso.AnnoInizio"></InputNumber>
        </InputGroup>
        <InputGroup Text="Anno Fine">
            <InputNumber class="form-control" @bind-Value="Corso.AnnoFine"></InputNumber>
        </InputGroup>
        <InputGroup Text="Provincia">
            <select class="custom-select" @onchange="(e)=>Provincia_OnChange(e)">
                @if (Id == null)
                {
                    <option selected value="0">Seleziona una provincia</option>
                    @foreach (var provincia in province)
                    {
                        <option value="@provincia.Id">@provincia.Nome</option>
                    }
                }
                else
                {
                    @foreach (var provincia in province)
                    {
                        @if (Corso.IdCitta != null && provincia.Id == ServizioCitta.GetProvinciaByIdCitta((int)Corso.IdCitta).Result.Id)
                        {
                            <option selected value="@provincia.Id">@provincia.Nome</option>
                        }
                        else
                        {
                            <option value="@provincia.Id">@provincia.Nome</option>
                        }
                    }
                }
            </select>
        </InputGroup>
        <InputGroup Text="Citta">
            <InputSelectNumber class="custom-select" @bind-Value="Corso.IdCitta">
                @if (Id == null)
                {
                    <option value="">Seleziona una citta</option>
                }
                @foreach (var citta in cittas)
                {
                    <option value="@citta.Id">@citta.Nome</option>
                }
            </InputSelectNumber>
        </InputGroup>
        <InputGroup Text="Organizzatore">
            <InputSelectNumber class="custom-select" @bind-Value="Corso.IdOrganizzatore">
                @if (Id == null)
                {
                    <option value="">Seleziona un organizzatore</option>
                }
                @foreach (var organizzatore in ServizioPersonaleFitstic.GetOrganizzatori().Result)
                {
                    <option value="@organizzatore.Id">@organizzatore.Nome @organizzatore.Cognome Nato il @organizzatore.DataNascita.ToShortDateString() e Assunto il @organizzatore.DataAssunzione.ToShortDateString()</option>
                }
            </InputSelectNumber>
        </InputGroup>
        <div class="d-flex flex-column flex-md-row justify-content-end align-items-center">
            <a href="/corsi" class="btn btn-secondary w-100px ml-1 mt-1 mt-md-0">Indietro</a>
            @if (Id != null)
            {
                <button type="button" class="btn btn-danger w-100px ml-1 mt-1 mt-md-0" data-toggle="modal" data-target="#elimina-corso">Elimina</button>
            }
            <button type="submit" class="btn btn-success w-100px ml-1 mt-1 mt-md-0">Salva</button>
        </div>
    </EditForm>
</div>
<Modal Id="elimina-corso" BtnText="Elimina" Titolo="Elimina Corso" OnClick="async () => await EliminaCorso(Corso)">
    Sei sicuro di voler eliminare il corso @Corso?.Nome @Corso?.AnnoInizio - @Corso?.AnnoFine?
</Modal>
@if (Id != null)
{
    <hr />
    <h1 class="mb-4">Moduli</h1>
    <Card>
        <CardHeader>
            <h6 class="m-0 font-weight-bold text-primary">Moduli</h6>
            <a href="/corsi/@Id/moduli/create" class="btn btn-success">Aggiungi</a>
        </CardHeader>
        <CardBody>
            <Table Id="moduli" Items="ServizioModuli.GetModuliDelCorso((int)Id).Result">
                <TableHeader>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Data Inizio</th>
                    <th>Data Fine</th>
                    <th>Materia</th>
                    <th>Docente</th>
                    <th>Tutor</th>
                    <th></th>
                </TableHeader>
                <RowTemplate>
                    <td>@context.Id</td>
                    <td>@context.Nome</td>
                    <td>@context.DataInizio.ToShortDateString()</td>
                    <td>@context.DataFine?.ToShortDateString()</td>
                    <td>@context.Materia</td>
                    @using (var docente = ServizioModuli.GetDocenteDelModulo(context))
                        {
                        <td>
                            @docente.Result.Nome @docente.Result.Cognome
                        </td>
                        }
                    @using (var tutor = ServizioModuli.GetTutorDelModulo(context))
                        {
                        <td>
                            @tutor.Result.Nome @tutor.Result.Cognome
                        </td>
                        }
                    <td><a href="/corsi/@Id/moduli/view/@context.Id" class="btn btn-primary">Dettaglio</a></td>
                </RowTemplate>
            </Table>
        </CardBody>
    </Card>
    <hr />
    <h1 class="mb-4">Iscrizioni</h1>
    <Card>
        <CardHeader>
            <h6 class="m-0 font-weight-bold text-primary">Iscrizioni</h6>
            <a href="/corsi/@Id/iscrizioni/create" class="btn btn-success">Aggiungi</a>
        </CardHeader>
        <CardBody>
            <Table Id="iscrizioni" Items="ServizioStudenti.GetStudentiDelCorso((int)Id).Result">
                <TableHeader>
                    <th>ID</th>
                    <th>Nome</th>
                    <th>Cognome</th>
                    <th>Data Iscrizione</th>
                    <th>Stato</th>
                    <th>Voto Finale</th>
                    <th></th>
                </TableHeader>
                <RowTemplate>
                    <td>@context.Id</td>
                    <td>@context.Nome</td>
                    <td>@context.Cognome</td>
                    <td>@context.DataIscrizione</td>
                    <td>@ServizioStudenti.StatoToString(context)</td>
                    <td>@context.VotoFinale</td>
                    <td><a href="/corsi/@Id/iscrizioni/view/@context.Id" class="btn btn-primary">Dettaglio</a></td>
                </RowTemplate>
            </Table>
        </CardBody>
    </Card>
}
@code {
    [Parameter]
    public int? Id { get; set; }
    public Corso Corso { get; set; }
    List<Provincia> province;
    List<Citta> cittas;

    AlertSettings AlertCorsi = new AlertSettings();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            province = await ServizioCitta.GetProvince();
            Corso = Id == null ? new Corso { AnnoInizio = DateTime.Now.Year, AnnoFine = DateTime.Now.Year } : await ServizioCorsi.CorsoById((int)Id);
            cittas = Id != null ? await ServizioCitta.GetCittaByIdProvicia(ServizioCitta.GetProvinciaByIdCitta((int)Corso.IdCitta).Result.Id) : new List<Citta>();
        }
        else NavigationManager.NavigateTo("/");
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("GeneraDataTable", 7, "#moduli");
            await JSRuntime.InvokeVoidAsync("GeneraDataTable", 6, "#iscrizioni");
        }

    }
    protected async Task Form_OnSubmit()
    {
        if (Id == null) await ServizioCorsi.SalvaCorso(Corso);
        else await ServizioCorsi.SalvaCambiamenti();
        StateHasChanged();
        NavigationManager.NavigateTo("/corsi");
    }
    protected async Task Provincia_OnChange(ChangeEventArgs e)
    {
        int idProv;
        Corso.IdCitta = null;
        if (int.TryParse(e.Value.ToString(), out idProv)) cittas = await ServizioCitta.GetCittaByIdProvicia(idProv);
    }
    protected async Task EliminaCorso(Corso c)
    {
        string nomeCorso = c.Nome;
        if (await ServizioCorsi.EliminaCorso(c)) NavigationManager.NavigateTo("/corsi");
        else AlertCorsi = new AlertSettings() { IsVisible = true, TypeMessage = Color.Danger, Message = $"Il Corso \"{nomeCorso}\" non può essere eliminato" };
    }

}
